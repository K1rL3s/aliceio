import logging
import os
import random
import sys
from typing import Any, Awaitable, Callable, Dict, Union

from aiohttp import web

from aliceio import BaseMiddleware, Dispatcher, F, Router, Skill
from aliceio.filters import BaseFilter
from aliceio.types import Message, User
from aliceio.webhook.aiohttp_server import OneSkillRequestHandler, setup_application

router = Router(name=__name__)


class RandomFloatMiddleware(BaseMiddleware[Message]):
    def __init__(self, start: float = 0.01, end: float = 100.0) -> None:
        self.start = start
        self.end = end

    async def __call__(
        self,
        handler: Callable[[Message, Dict[str, Any]], Awaitable[Any]],
        event: Message,
        data: Dict[str, Any],
    ) -> Any:
        # –î–æ–±–∞–ª—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç3
        data["float_num"] = round(random.uniform(self.start, self.end), 3)
        return await handler(event, data)


class RandomNumberFilter(BaseFilter):
    async def __call__(
        self,
        message: Message,
        event_from_user: User,
        # –§–∏–ª—å—Ç—Ä—ã —Ç–∞–∫–∂–µ –º–æ–≥—É—Ç –ø—Ä–∏–Ω–∏–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    ) -> Union[bool, Dict[str, Any]]:
        if message.command == "—á–∏—Å–ª–æ":
            # –í–æ–∑–≤—Ä–∞—Ç —Å–ª–æ–≤–∞—Ä—è –æ–±–Ω–æ–≤–∏—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç
            return {"int_num": random.randint(1_000, 10_000)}
        return False


@router.message(RandomNumberFilter())
async def random_number_handler(
    message: Message,
    int_num: int,  # –ü–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å "int_num" –∫–∞–∫ –∏–º–µ–Ω–æ–≤–∞–Ω–Ω—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    float_num: float,  # –ê –ø–æ—Å–ª–µ –º–∏–¥–ª–≤–∞—Ä—è –º–æ–∂–Ω–æ –ø—Ä–∏–Ω—è—Ç—å "float_num"
) -> str:
    return f"üé≤ –ú–æ—ë —á–∏—Å–ª–æ... {int_num}!\nü§ì–®–∞–Ω—Å –Ω–∞ —ç—Ç–æ –±—ã–ª ~{float_num}%"


@router.message(F.text.as_("real_text"))
async def start_handler(
    message: Message,
    yoy_num: int,  # –ê—Ä–≥—É–º–µ–Ω—Ç –∏–∑ –¥–∞—Ç—ã –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    kek_num: int,  # –ê—Ä–≥—É–º–µ–Ω—Ç –∏–∑ –¥–∞—Ç—ã RequestHandler'–∞
    real_text: str,  # –ê—Ä–≥—É–º–µ–Ω—Ç –∏–∑ –º–∞–≥–∏—á–µ—Å–∫–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
) -> str:
    assert real_text == message.text
    return (
        'üíª –°–∫–∞–∂–∏ "—á–∏—Å–ª–æ", –∏ —è —Å–∫–∞–∂—É —á–∏—Å–ª–æ, –∫–æ—Ç–æ—Ä–æ–µ —è –∑–∞–¥—É–º–∞–ª\n'
        f"(—Ç–æ—á–Ω–æ –Ω–µ {yoy_num} –∏ –Ω–µ {kek_num})"
    )


def main() -> None:
    dp = Dispatcher(yoy_num=42)  # –¢–æ–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    dp.include_router(router)
    dp.message.middleware(RandomFloatMiddleware())

    skill_id = os.environ["SKILL_ID"]
    skill = Skill(skill_id=skill_id)

    app = web.Application()
    webhook_requests_handler = OneSkillRequestHandler(
        dispatcher=dp,
        skill=skill,
        kek_num=1337,  # –¢–æ–∂–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    )

    WEB_SERVER_HOST = "127.0.0.1"
    WEB_SERVER_PORT = 80
    WEBHOOK_PATH = "/alice"

    webhook_requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, skill=skill)
    web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO, stream=sys.stdout)
    main()
