import os
import random
from collections.abc import Sequence
from typing import Any

from aiohttp import web

from aliceio import Dispatcher, F, Router, Skill
from aliceio.filters import BaseFilter
from aliceio.fsm.context import FSMContext
from aliceio.fsm.state import State, StatesGroup
from aliceio.types import ButtonPressed, Message, Response, TextButton
from aliceio.types.alice_event import AliceEvent
from aliceio.webhook.aiohttp_server import (
    OneSkillAiohttpRequestHandler,
    setup_application,
)

CANCEL_STATE_WORDS = ("—Å—Ç–æ–ø", "–æ—Ç–º–µ–Ω", "–ø—Ä–µ–∫—Ä–∞—Ç–∏", "–≤—ã–π—Ç–∏", "–≤—ã—Ö–æ–¥")
GAMES_LIST = ("—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ", "–Ω–∞–ø–µ—Ä—Å—Ç–∫–∏")
THIMBLE = "üóëÔ∏è"


class Game(StatesGroup):
    select = State()
    guess_num = State()
    thimbles = State()


class ContainsFilter(BaseFilter):
    def __init__(self, words: Sequence[str]) -> None:
        self.words = words

    async def __call__(self, message: Message) -> bool:
        return any(word in message.command for word in self.words)


router = Router()


# –ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–∞–≤—ã–∫–æ–º –∏ –≤—ã—Ö–æ–¥ –∏–∑ –∏–≥—Ä—ã
@router.message(F.session.new)
@router.message(ContainsFilter(CANCEL_STATE_WORDS))
async def new_session(message: Message, state: FSMContext) -> Response:
    await state.clear()
    await state.set_state(Game.select)
    return Response(
        text="–ü—Ä–∏–≤–µ—Ç! –î–∞–≤–∞–π –∏–≥—Ä–∞—Ç—å! –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É:",
        buttons=[TextButton(title=title.capitalize()) for title in GAMES_LIST],
    )


# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±—Ä–∞–ª –∏–≥—Ä—É
@router.message(Game.select, ContainsFilter(GAMES_LIST))
async def select_game(message: Message, state: FSMContext) -> Response:
    text = "–û—Ç–ª–∏—á–Ω–æ! –ò–≥—Ä–∞–µ–º –≤ "
    if "—É–≥–∞–¥–∞–π —á–∏—Å–ª–æ" in message.text:
        text += "—É–≥–∞–¥–∞–π–∫—É.\n–Ø –∑–∞–≥–∞–¥–∞–ª —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100, —É–≥–∞–¥—ã–≤–∞–π!"
        buttons = [TextButton(title=title) for title in ("–°–¥–∞—é—Å—å", "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")]
        await state.set_state(Game.guess_num)
        await state.set_data(my_num=random.randint(1, 100))
    else:
        text += "–Ω–∞–ø—Ä—ë—Å—Ç–∫–∏.\n–ö—Ä—É—á—É, –≤–µ—Ä—á—É, –∑–∞–ø—É—Ç–∞—Ç—å —Ö–æ—á—É! –ì–¥–µ?"
        buttons = generate_thimbles()
        await state.set_state(Game.thimbles)
    return Response(text=text, buttons=buttons)


# –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Game.guess_num –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —á–∏—Å–ª–æ
@router.message(Game.guess_num, F.text.cast(int).as_("guess_num"))
async def guess_num_guess(
    message: Message,
    state: FSMContext,
    guess_num: int,
) -> Response:
    data = await state.get_data()
    my_num: int = data["my_num"]

    if my_num == guess_num:
        await state.clear()
        text = "–í–µ—Ä–Ω–æ! –¢—ã —É–≥–∞–¥–∞–ª!"
        buttons = None
    else:
        text = "–ù–µ—Ç, –Ω–æ —Ç—ã –±–ª–∏–∑–∫–æ! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë.\n–ó–∞–≥–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ "
        if my_num > guess_num:
            text += "–±–æ–ª—å—à–µ"
        else:
            text += "–º–µ–Ω—å—à–µ"
        buttons = [TextButton(title=title) for title in ("–°–¥–∞—é—Å—å", "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")]

    return Response(text=text, buttons=buttons)


# –°—Ä–∞–±–æ—Ç–∞–µ—Ç, –∫–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–µ Game.guess_num –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–¥–∞—ë—Ç—Å—è
@router.message(Game.guess_num, F.text.contains("—Å–¥–∞—é—Å—å"))
async def guess_num_give_up(message: Message, state: FSMContext) -> str:
    data = await state.get_data()
    my_num: int = data["my_num"]
    await state.clear()
    return f"–ê –≤–µ–¥—å —Ç—ã –ø–æ—á—Ç–∏ —É–≥–∞–¥–∞–ª!\n–≠—Ç–æ –±—ã–ª–æ {my_num}..."


# –°—Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∏ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö —Å —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º Game.guess_num
@router.message(Game.guess_num)
async def guess_num_not_digit(message: Message) -> Response:
    return Response(
        text="–≠—Ç–æ –Ω–µ —á–∏—Å–ª–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.",
        buttons=[TextButton(title=title) for title in ("–°–¥–∞—é—Å—å", "–ü—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å")],
    )


# –°—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –Ω–∞–ø—ë—Ä—Å—Ç–∫–æ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Game.thimbles
@router.button_pressed(Game.thimbles)
async def thimbles_button(button: ButtonPressed) -> Response:
    text = "–í–µ—Ä–Ω–æ! –¢—ã —É–≥–∞–¥–∞–ª!" if button.payload["win"] else "–ù–µ–∞, –¥–∞–≤–∞–π –µ—â—ë —Ä–∞–∑–æ–∫."
    text += "\n–ö—Ä—É—á—É, –≤–µ—Ä—á—É! –ì–¥–µ?"
    return Response(text=text, buttons=generate_thimbles())


# –°—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ Game.thimbles
@router.message(Game.thimbles)
async def thimbles_message(message: Message) -> Response:
    return Response(
        text="–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–∂–∞—Ç—å –Ω–∞ –Ω–∞–ø—ë—Ä—Å—Ç–æ–∫. –ï—Å–ª–∏ —Ö–æ—á–µ—à—å –ø—Ä–µ–∫—Ä–∞—Ç–∏—Ç—å, —Ç–æ —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏",
        buttons=generate_thimbles(),
    )


# –°–æ–∑–¥–∞—ë—Ç —Ç—Ä–∏ –Ω–∞–ø—ë—Ä—Å—Ç–∫–∞, —Å—Ä–µ–¥–∏ –∫–æ—Ç–æ—Ä—ã—Ö –æ–¥–∏–Ω –≤—ã–∏–≥—Ä—ã—à–Ω—ã–π
def generate_thimbles() -> list[TextButton]:
    buttons = [TextButton(title=THIMBLE, payload={"win": False}) for _ in range(3)]
    random_button = random.choice(buttons)
    payload: dict[str, Any] = random_button.payload
    payload["win"] = True
    return buttons


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏—Å—å –≤—ã—à–µ
@router.message()
@router.button_pressed()
async def wtf_is_happened(event: AliceEvent, state: FSMContext) -> Response:
    await state.clear()
    await state.set_state(Game.select)
    return Response(
        text="–ù–µ –ø–æ–Ω—è–ª —Ç–µ–±—è. –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞.",
        buttons=[TextButton(title=title.capitalize()) for title in GAMES_LIST],
    )


def main() -> None:
    # use_api_storage –º–æ–∂–Ω–æ –∏ –Ω–∞ True,
    # —Ç–æ–≥–¥–∞ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ê–ª–∏—Å—ã
    dp = Dispatcher(use_api_storage=False)
    dp.include_router(router)

    skill_id = os.environ["SKILL_ID"]
    skill = Skill(skill_id=skill_id)

    app = web.Application()
    requests_handler = OneSkillAiohttpRequestHandler(dispatcher=dp, skill=skill)

    WEB_SERVER_HOST = "127.0.0.1"
    WEB_SERVER_PORT = 80
    WEBHOOK_PATH = "/alice"

    requests_handler.register(app, path=WEBHOOK_PATH)
    setup_application(app, dp, skill=skill)
    web.run_app(app, host=WEB_SERVER_HOST, port=WEB_SERVER_PORT)


if __name__ == "__main__":
    main()
